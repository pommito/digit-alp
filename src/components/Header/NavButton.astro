---
import PerspectiveText from "./PerspectiveText.astro";

type Props = {
  theme: 'light' | 'dark';
}

const { theme = 'light' } = Astro.props as Props;
---


<div id="nav_btn" class="relative group h-14 w-32 rounded-full cursor-pointer overflow-hidden" aria-expanded="false" aria-controls="nav_menu">

  <div class="group/button relative h-full w-full transition-transform duration-500 ease-[cubic-bezier(0.76,0,0.24,1)] group-aria-expanded:-translate-y-full z-9999">

    <div class={`w-full h-full text-lg ${theme === 'light' ? 'bg-da-black text-da-white' : 'bg-da-white text-da-black'}`}>
      <PerspectiveText label="Menu" />
    </div>
    <div class={`absolute w-full h-full top-full text-lg ${theme === 'light' ? 'bg-da-white text-da-black' : 'bg-da text-da-white'}`}>
      <PerspectiveText label="Fermer" />
    </div>

  </div>

</div>

<script>
const btnElem = document.getElementById("nav_btn");
const menuElem = document.getElementById("nav_menu");

if(btnElem && menuElem) {
  const toggleMenu = () => {
    const isExpanded = btnElem.getAttribute("aria-expanded") === "true";

    menuElem.setAttribute("aria-hidden", (isExpanded).toString());
    btnElem.setAttribute("aria-expanded", (!isExpanded).toString());
  };

  btnElem.addEventListener("click", toggleMenu);
  
  document.addEventListener("click", (event) => {
    const isExpanded = btnElem.getAttribute("aria-expanded") === "true";
    if (isExpanded && !menuElem.contains(event.target) && !btnElem.contains(event.target)) {
      toggleMenu();
    }
  });
}
 
 </script>