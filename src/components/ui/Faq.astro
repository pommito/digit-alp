---

type Props = {
  questions: Array<{
    label: string;
    answer: string;
  }>;
}

const { questions } = Astro.props;
---


<ul id="faqList">
  {questions.map((question, index) => (
    <li class="w-full divide-y divide-neutral-200 box-border">
      <button id={`faqButton-${index}`} class="group peer text-xl flex justify-between py-4 w-full cursor-pointer" aria-expanded="false" aria-controls={`faq-${index}`}>
        <span>{question.label}</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-rotate duration-300 ease-in-out group-aria-expanded:rotate-90"><path d="m9 18 6-6-6-6"/></svg>
      </button>
      <div id={`faq-${index}`} class="box-border h-auto max-h-0 invisible transition-all duration-750 ease-in-out overflow-hidden peer-aria-expanded:max-h-32 peer-aria-expanded:visible">
        <p class="py-4">{question.answer}</p>
      </div>
    </li>
  ))}
</ul>

<script >
  const listElem = document.getElementById('faqList');
  const buttonElems = document.querySelectorAll('button[id^="faqButton-"]');
  
  if (listElem) {
    listElem.addEventListener('click', (e) => {
      const buttonTargeted = e.target.closest('button[id^="faqButton-"]');
  
      if (buttonTargeted) {
        const isExpanded = buttonTargeted.getAttribute('aria-expanded') === 'true';
        buttonTargeted.setAttribute('aria-expanded', isExpanded ? 'false' : 'true');
  
        buttonElems.forEach(button => {
          if (button !== buttonTargeted) {
            button.setAttribute('aria-expanded', 'false');
          }
        });
      }
    });
  }
  </script>
